{"ast":null,"code":"import { format } from \"date-fns\";\nexport const getImageDetailsArray = block => {\n  let imageBlocks = [];\n\n  if (block && block.type === 'Image') {\n    imageBlocks.push(block);\n  }\n\n  if (block.children && block.children.length > 0) {\n    for (const child of block.children) {\n      imageBlocks = imageBlocks.concat(getImageDetailsArray(child));\n    }\n  }\n\n  return imageBlocks;\n};\nexport const formatDate = inputDate => {\n  if (!inputDate) {\n    return undefined;\n  }\n\n  const parsedDate = new Date(inputDate);\n  return format(parsedDate, 'MMMM dd, yyyy');\n};","map":{"version":3,"sources":["/Users/amalmathew/Code/simpplr-fe/frontend-test-amalmathew91/src/utils.ts"],"names":["format","getImageDetailsArray","block","imageBlocks","type","push","children","length","child","concat","formatDate","inputDate","undefined","parsedDate","Date"],"mappings":"AAAA,SAASA,MAAT,QAAuB,UAAvB;AAGA,OAAO,MAAMC,oBAAoB,GAAIC,KAAD,IAA2B;AAC3D,MAAIC,WAAoB,GAAG,EAA3B;;AACA,MAAID,KAAK,IAAIA,KAAK,CAACE,IAAN,KAAe,OAA5B,EAAqC;AACjCD,IAAAA,WAAW,CAACE,IAAZ,CAAiBH,KAAjB;AACH;;AACD,MAAIA,KAAK,CAACI,QAAN,IAAkBJ,KAAK,CAACI,QAAN,CAAeC,MAAf,GAAwB,CAA9C,EAAiD;AAC7C,SAAK,MAAMC,KAAX,IAAoBN,KAAK,CAACI,QAA1B,EAAoC;AAChCH,MAAAA,WAAW,GAAGA,WAAW,CAACM,MAAZ,CAAmBR,oBAAoB,CAACO,KAAD,CAAvC,CAAd;AACH;AACJ;;AACD,SAAOL,WAAP;AACH,CAXM;AAaP,OAAO,MAAMO,UAAU,GAAIC,SAAD,IAA2C;AACjE,MAAI,CAACA,SAAL,EAAgB;AACZ,WAAOC,SAAP;AACD;;AACH,QAAMC,UAAU,GAAG,IAAIC,IAAJ,CAASH,SAAT,CAAnB;AACA,SAAOX,MAAM,CAACa,UAAD,EAAa,eAAb,CAAb;AACD,CANI","sourcesContent":["import { format } from \"date-fns\";\nimport { Block } from \"./blocks\";\n\nexport const getImageDetailsArray = (block: Block): Block[] => {\n    let imageBlocks: Block[] = []\n    if (block && block.type === 'Image') {\n        imageBlocks.push(block);\n    }\n    if (block.children && block.children.length > 0) {\n        for (const child of block.children) {\n            imageBlocks = imageBlocks.concat(getImageDetailsArray(child));\n        }\n    }\n    return imageBlocks;\n}\n\nexport const formatDate = (inputDate: string): string | undefined => {\n    if (!inputDate) {\n        return undefined;\n      }\n    const parsedDate = new Date(inputDate);\n    return format(parsedDate, 'MMMM dd, yyyy');\n  };"]},"metadata":{},"sourceType":"module"}