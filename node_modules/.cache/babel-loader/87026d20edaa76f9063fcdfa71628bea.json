{"ast":null,"code":"var _jsxFileName = \"/Users/amalmathew/Code/simpplr-fe/frontend-test-amalmathew91/src/components/ImageGrid/ImageGrid.tsx\",\n    _s = $RefreshSig$();\n\nimport styles from './ImageGrid.module.css';\nimport { Hourglass } from 'react-loader-spinner';\nimport { formatDate, getImageDetailsArray } from '../../utils';\nimport { Link } from 'react-router-dom';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ImageGrid = props => {\n  _s();\n\n  let imageDetails = [];\n  const [selectedImageId, setSelectedImageId] = useState(null);\n\n  const handleImageClick = id => {\n    setSelectedImageId(id);\n  };\n\n  if (!props.isloading && props.data) {\n    imageDetails = getImageDetailsArray(props.data);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.imageGrid,\n    children: props.isloading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.spinner,\n      \"data-testid\": \"loader\",\n      children: /*#__PURE__*/_jsxDEV(Hourglass, {\n        colors: ['#0ACA87 ', '#0ACA87 '],\n        height: \"110\",\n        width: \"110\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      \"data-testid\": \"image-grid-div\",\n      children: imageDetails.map((imageData, index) => {\n        var _imageData$data, _imageData$data2, _imageData$data3, _imageData$data4, _imageData$options;\n\n        return /*#__PURE__*/_jsxDEV(Link, {\n          to: {\n            pathname: `/block/${imageData.id}`,\n            state: {\n              id: imageData.id,\n              description: imageData === null || imageData === void 0 ? void 0 : (_imageData$data = imageData.data) === null || _imageData$data === void 0 ? void 0 : _imageData$data.description,\n              dimensions: (imageData === null || imageData === void 0 ? void 0 : (_imageData$data2 = imageData.data) === null || _imageData$data2 === void 0 ? void 0 : _imageData$data2.height) + ' X ' + (imageData === null || imageData === void 0 ? void 0 : (_imageData$data3 = imageData.data) === null || _imageData$data3 === void 0 ? void 0 : _imageData$data3.width),\n              createdAt: formatDate(imageData === null || imageData === void 0 ? void 0 : (_imageData$data4 = imageData.data) === null || _imageData$data4 === void 0 ? void 0 : _imageData$data4.createdAt)\n            }\n          },\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            width: 385,\n            style: {\n              marginLeft: '12px',\n              marginRight: '12px',\n              paddingTop: '20px',\n              border: selectedImageId ? '2px solid blue' : 'none'\n            },\n            height: 260,\n            src: (_imageData$options = imageData.options) === null || _imageData$options === void 0 ? void 0 : _imageData$options.url,\n            alt: `Image ${index}`,\n            onClick: () => handleImageClick(index)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ImageGrid, \"vOQtNCZfWktNcntbbRF6Zvb37S4=\");\n\n_c = ImageGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageGrid\");","map":{"version":3,"sources":["/Users/amalmathew/Code/simpplr-fe/frontend-test-amalmathew91/src/components/ImageGrid/ImageGrid.tsx"],"names":["styles","Hourglass","formatDate","getImageDetailsArray","Link","useState","ImageGrid","props","imageDetails","selectedImageId","setSelectedImageId","handleImageClick","id","isloading","data","imageGrid","spinner","map","imageData","index","pathname","state","description","dimensions","height","width","createdAt","marginLeft","marginRight","paddingTop","border","options","url"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,wBAAnB;AAGA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,UAAT,EAAqBC,oBAArB,QAAiD,aAAjD;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAMA,OAAO,MAAMC,SAAS,GAAIC,KAAD,IAA2B;AAAA;;AAClD,MAAIC,YAAqB,GAAG,EAA5B;AACA,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCL,QAAQ,CAAgB,IAAhB,CAAtD;;AACA,QAAMM,gBAAgB,GAAIC,EAAD,IAAgB;AACvCF,IAAAA,kBAAkB,CAACE,EAAD,CAAlB;AACD,GAFD;;AAGA,MAAI,CAACL,KAAK,CAACM,SAAP,IAAoBN,KAAK,CAACO,IAA9B,EAAoC;AAClCN,IAAAA,YAAY,GAAGL,oBAAoB,CAACI,KAAK,CAACO,IAAP,CAAnC;AACD;;AACD,sBACE;AAAK,IAAA,SAAS,EAAEd,MAAM,CAACe,SAAvB;AAAA,cACGR,KAAK,CAACM,SAAN,gBACC;AAAK,MAAA,SAAS,EAAEb,MAAM,CAACgB,OAAvB;AAAgC,qBAAY,QAA5C;AAAA,6BACE,QAAC,SAAD;AACE,QAAA,MAAM,EAAE,CAAC,UAAD,EAAa,UAAb,CADV;AAEE,QAAA,MAAM,EAAC,KAFT;AAGE,QAAA,KAAK,EAAC;AAHR;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADD,gBASC;AAAK,qBAAY,gBAAjB;AAAA,gBACGR,YAAY,CAACS,GAAb,CAAiB,CAACC,SAAD,EAAYC,KAAZ;AAAA;;AAAA,4BAChB,QAAC,IAAD;AACE,UAAA,EAAE,EAAE;AACFC,YAAAA,QAAQ,EAAG,UAASF,SAAS,CAACN,EAAG,EAD/B;AAEFS,YAAAA,KAAK,EAAE;AACLT,cAAAA,EAAE,EAAEM,SAAS,CAACN,EADT;AAELU,cAAAA,WAAW,EAAEJ,SAAF,aAAEA,SAAF,0CAAEA,SAAS,CAAEJ,IAAb,oDAAE,gBAAiBQ,WAFzB;AAGLC,cAAAA,UAAU,EACR,CAAAL,SAAS,SAAT,IAAAA,SAAS,WAAT,gCAAAA,SAAS,CAAEJ,IAAX,sEAAiBU,MAAjB,IAA0B,KAA1B,IAAkCN,SAAlC,aAAkCA,SAAlC,2CAAkCA,SAAS,CAAEJ,IAA7C,qDAAkC,iBAAiBW,KAAnD,CAJG;AAKLC,cAAAA,SAAS,EAAExB,UAAU,CAACgB,SAAD,aAACA,SAAD,2CAACA,SAAS,CAAEJ,IAAZ,qDAAC,iBAAiBY,SAAlB;AALhB;AAFL,WADN;AAAA,iCAaE;AACE,YAAA,KAAK,EAAE,GADT;AAEE,YAAA,KAAK,EAAE;AACLC,cAAAA,UAAU,EAAE,MADP;AAELC,cAAAA,WAAW,EAAE,MAFR;AAGLC,cAAAA,UAAU,EAAE,MAHP;AAILC,cAAAA,MAAM,EAAErB,eAAe,GAAG,gBAAH,GAAsB;AAJxC,aAFT;AAQE,YAAA,MAAM,EAAE,GARV;AAUE,YAAA,GAAG,wBAAES,SAAS,CAACa,OAAZ,uDAAE,mBAAmBC,GAV1B;AAWE,YAAA,GAAG,EAAG,SAAQb,KAAM,EAXtB;AAYE,YAAA,OAAO,EAAE,MAAMR,gBAAgB,CAACQ,KAAD;AAZjC,aASOA,KATP;AAAA;AAAA;AAAA;AAAA;AAbF,WAWOA,KAXP;AAAA;AAAA;AAAA;AAAA,gBADgB;AAAA,OAAjB;AADH;AAAA;AAAA;AAAA;AAAA;AAVJ;AAAA;AAAA;AAAA;AAAA,UADF;AA8CD,CAvDM;;GAAMb,S;;KAAAA,S","sourcesContent":["import styles from './ImageGrid.module.css';\n\nimport { Block } from '../../blocks';\nimport { Hourglass } from 'react-loader-spinner';\nimport { formatDate, getImageDetailsArray } from '../../utils';\nimport { Link } from 'react-router-dom';\nimport { useState } from 'react';\n\ntype ImageGridProps = {\n  data?: Block;\n  isloading?: boolean;\n};\nexport const ImageGrid = (props: ImageGridProps) => {\n  let imageDetails: Block[] = [];\n  const [selectedImageId, setSelectedImageId] = useState<string | null>(null);\n  const handleImageClick = (id: string) => {\n    setSelectedImageId(id);\n  }\n  if (!props.isloading && props.data) {\n    imageDetails = getImageDetailsArray(props.data);\n  }\n  return (\n    <div className={styles.imageGrid}>\n      {props.isloading ? (\n        <div className={styles.spinner} data-testid=\"loader\">\n          <Hourglass\n            colors={['#0ACA87 ', '#0ACA87 ']}\n            height=\"110\"\n            width=\"110\"\n          />\n        </div>\n      ) : (\n        <div data-testid=\"image-grid-div\">\n          {imageDetails.map((imageData, index) => (\n            <Link\n              to={{\n                pathname: `/block/${imageData.id}`,\n                state: {\n                  id: imageData.id,\n                  description: imageData?.data?.description,\n                  dimensions:\n                    imageData?.data?.height + ' X ' + imageData?.data?.width,\n                  createdAt: formatDate(imageData?.data?.createdAt!),\n                },\n              }}\n              key={index}\n            >\n              <img\n                width={385}\n                style={{\n                  marginLeft: '12px',\n                  marginRight: '12px',\n                  paddingTop: '20px',\n                  border: selectedImageId ? '2px solid blue' : 'none',\n                }}\n                height={260}\n                key={index}\n                src={imageData.options?.url}\n                alt={`Image ${index}`}\n                onClick={() => handleImageClick(index)}\n              />\n            </Link>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}